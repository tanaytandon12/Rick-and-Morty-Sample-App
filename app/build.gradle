apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'

allOpen {
    annotation 'com.weather.willy.willyweathersample.OpenForTesting'
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.weather.willy.willyweathersample"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {

        debug {
            applicationIdSuffix ".debug"
            buildConfigField('String', 'SERVER_URL', "\"https://rickandmortyapi.com/api/\"")
            buildConfigField('String', 'DATABASE_NAME', "\"RickAndMorty\"")
            buildConfigField('int', 'DATABASE_VERSION', "1")
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }

    flavorDimensions "default"

    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            dimension "default"
            applicationIdSuffix = ".mock"
        }
        prod {
            dimension "default"
            applicationIdSuffix = ".prod"
        }
    }


    android.variantFilter { variant ->
        if (variant.buildType.name == 'release'
                && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true)
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
        exclude("META-INF/*.kotlin_module")
    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.0'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    implementation "androidx.core:core-ktx:+"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "com.google.android.material:material:$material_version"

    // fragment testing
    debugImplementation "androidx.fragment:fragment-testing:$fragment_test_version"
    debugImplementation "androidx.fragment:fragment-ktx:$fragment_test_version"

    // espresso
    debugImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    debugImplementation 'androidx.test:runner:1.2.0'
    debugImplementation 'androidx.test:rules:1.2.0'
    debugImplementation "androidx.test.espresso:espresso-idling-resource:3.2.0"


    //coroutine support
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_ktx_ext_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$livedata_ktx_ext_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$viewmodel_ktx_ext_version"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.8'
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.8'

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"

    // room
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    androidTestImplementation "androidx.room:room-ktx:$room_version"
    androidTestImplementation "androidx.arch.core:core-testing:$arch_core_testing_version"
    testImplementation "androidx.arch.core:core-testing:$arch_core_testing_version"


    // retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$logging_interceptor_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    // paging
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"

    //recyclerview
    implementation "androidx.recyclerview:recyclerview:$recyclerview_version"

    // extensions
    implementation "android.arch.lifecycle:extensions:$lifecycle_ext_version"

    // pull to refresh
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$pull_to_refresh_version"

    // mockito
    androidTestImplementation "com.linkedin.dexmaker:dexmaker-mockito:$dexmaker_mockito_version"

    // mockk
    testImplementation "io.mockk:mockk:$mockk_version"
    androidTestImplementation "io.mockk:mockk-android:$mockk_version"

}